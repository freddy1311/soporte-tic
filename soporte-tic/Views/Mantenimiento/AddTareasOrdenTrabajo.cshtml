@model soporte_tic.Models.ViewModels.VMOrdenTrabajo

@{
    var model = Model;
}

<div class="modal-dialog modal-dialog-centered" role="document" id="frmCreateTareasOrdenTrabajo">
    <div class="modal-content" id="frmContent">
        <div class="modal-header">
            <h5 class="modal-title" id="staticBackdropLabel">Agregar Tareas a Orden Trabajo</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div class="row mb-1">
                <div class="text-muted">
                    <div class="d-flex mb-1">
                        <div class="me-2 fw-bold" style="width: 100px;">Orden #:</div>
                        <div>{{ ordenTrabajo.ortrNúmero }}</div>
                    </div>
                    <div class="d-flex mb-1">
                        <div class="me-2 fw-bold" style="width: 100px;">Semana:</div>
                        <div>{{ ordenTrabajo.ortrSemana }}</div>
                    </div>
                    <div class="d-flex mb-1">
                        <div class="me-2 fw-bold" style="width: 100px;">Línea:</div>
                        <div>{{ ordenTrabajo.maquNombreF }}</div>
                    </div>
                    <div class="d-flex mb-1">
                        <div class="me-2 fw-bold" style="width: 100px;">Maquinaria:</div>
                        <div>{{ ordenTrabajo.maquNombre }}</div>
                    </div>
                </div>
            </div>
            <hr />
            <div class="row mb-1">
                <div class="col-lg-10">
                    <label for="cboTareas">Tareas:</label>
                    <select id="cboTareas" class="form-select">
                        <option selected class="text-muted" value="-1">Seleccione una tarea...</option>
                        <option v-for="tarea of listaTareas" :value="tarea.tamaCodigo">{{tarea.tamaNombre}}</option>
                    </select>
                </div>
                <div class="col-lg-2">
                    <label>Agregar:</label>
                    <button class="btn btn-success" v-on:click="addTarea()">
                        <i class="mdi mdi-plus"></i>
                    </button>
                </div>
            </div>
            <hr />
            <div class="row mb-1">
                <div class="col-lg-12">
                    <p class="text-muted">
                        Tareas a agregar:
                    </p>
                    <table class="table table-sm table-bordered dt-responsive w-100">
                        <thead>
                            <tr>
                                <th scope="col">Tarea</th>
                                <th scope="col" width="20">Opciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr v-for="tarea of listaTareasIn">
                                <td>{{tarea.tamaNombre}}</td>
                                <td style="text-align: center;">
                                    <a class="text-danger" href="javascript:void(0);" title="Eliminar tarea" v-on:click="deleteTarea(tarea.tamaCodigo)">
                                        <i class="mdi mdi-delete-outline"></i>
                                    </a>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            <button type="button" class="btn btn-primary" v-on:click="createTareasOrdenTrabajo()">Crear</button>
        </div>
    </div>
</div>

<script>
    var frmCreateTareasOrdenTrabajo = new Vue({
        el: '#frmCreateTareasOrdenTrabajo',
        data: {
            lineas: [],
            maquinarias: [],
            listaTareas: [],
            listaTareasIn: [],
            ordenTrabajo: {},
            maquinariaSelected: 0,
            codigoOrden: 0,
            numeroOrden: 0,
            numeroSemana: 0
        },
        mounted: function () {

        },
        created: function () {
            this.ordenTrabajo = @Html.Raw(Json.Serialize(Model));
            this.maquinariaSelected = this.ordenTrabajo.maquCodigo;
            //console.log(JSON.stringify(this.ordenTrabajo));
            this.getTareas();
        },
        methods: {
            blockUI: function (msg) {
                $(function () {
                    //#region block UI
                    $('#frmContent').block({
                        message: msg,
                        css: {
                            backgroundColor: '#36404a',
                            color: '#fff',
                            height: 40,
                            paddingTop: 10,
                            paddingLeft: 10,
                            paddingRight: 10,
                            borderRadius: 7,
                            border: '0',
                            opacity: 0.5,
                            zIndex: 9999999,
                            cursor: 'wait'
                        },
                    });
                    //#endregion
                });
            },
            unblockUI: function () {
                $(function () {
                    $('#frmContent').unblock();
                });
            },
            showAlert: function (title, msg, icon) {

                const typeIcon = icon;

                Swal.fire(
                    {
                        title: title,
                        text: msg,
                        icon: typeIcon,
                        confirmButtonColor: '#0576b9'
                    }
                );
            },
            getLineas: function () {
                const url = '/Maquinaria/GetListMaquinarias/';
                this.lineas = [];

                axios.get(url).then(response => {
                    let rm = response.data;

                    if (rm.response) {
                        this.lineas = rm.result;
                    } else {
                        this.lineas = [];
                    }

                }).catch(error => {
                    console.error('Error getLineas => ' + error);
                });
            },
            selectLinea: function () {
                let lineaSelected = $('#cboMaquinariaPadre').val();
                this.maquinarias = [];
                this.getMaquinarias(lineaSelected);
            },
            getMaquinarias: function (codLinea) {
                if (codLinea) {
                    const url = '/Maquinaria/GetListMaquinariasComponente/';
                    this.maquinarias = [];

                    axios.get(url, {params: { codMaquinaria: codLinea }}).then(response => {
                        let rm = response.data;

                        if (rm.response) {
                            this.maquinarias = rm.result;
                        } else {
                            this.maquinarias = [];
                        }

                    }).catch(error => {
                        console.error('Error getMaquinarias => ' + error);
                    });
                } else {
                    this.showAlert('Validación', 'No se detectó código de Línea!.', 'warning');
                }
            },
            selectMaquinaria: function () {
                this.maquinariaSelected = $('#cboMaquinaria').val();  
            },
            getTareas: function () {
                if (this.maquinariaSelected > 0) {
                    const url = '/MaquinariaTarea/GetListTareasMaquinariaNoAll/';

                    axios.get(url, {params: {codMaquinaria: this.maquinariaSelected}}).
                    then((resp) => {
                        let rm = resp.data;

                        if (rm.response) {
                            this.listaTareas = rm.result;
                        } else {
                            this.listaTareas = [];
                        }
                    }).catch((error) => {
                        console.log('Ocurrió un error en getTareas:', error);
                    });
                } else {

                }
            },
            addTarea: function () {
                let codTarea = $('#cboTareas').val();
                //console.log('código tarea:', codTarea);
                if (codTarea > 0) {
                    //console.log('tareas:', JSON.stringify(this.listaTareas));
                    let existe = this.listaTareasIn.some(t => t.tamaCodigo === Number(codTarea));
                    if (existe) {
                        this.showAlert('Validación', 'La tarea seleccionada ya se encuentra en la lista previa!.', 'warning');
                        return;
                    }
                    let tareaAgregar = this.listaTareas.find(t => t.tamaCodigo === Number(codTarea));
                    tareaAgregar.ortrCodigo = this.ordenTrabajo.ortrCodigo;
                    //console.log('tarea add:', JSON.stringify(tareaAgregar));
                    this.listaTareasIn.push(tareaAgregar);
                } else {
                    this.showAlert('Validación', 'No se detectó una tarea válida!.', 'warning');
                    return;
                }
                
            },
            deleteTarea: function (codTarea) {
                let existe = this.listaTareasIn.some(t => t.tamaCodigo === Number(codTarea));
                if (existe) {
                    let tareaAgregar = this.listaTareas.find(t => t.tamaCodigo === Number(codTarea));
                    //console.log('tarea add:', JSON.stringify(tareaAgregar));
                    this.listaTareasIn = this.listaTareasIn.filter(t => t.tamaCodigo !== codTarea);
                } else {
                    this.showAlert('Validación', 'La tarea seleccionada ya se encuentra en la lista previa!.', 'warning');
                    return;
                }
            },
            createTareasOrdenTrabajo: function () {
                let url = '/Mantenimiento/AddTareasOrdenTrabajo/';

                if (this.listaTareasIn.length > 0) {
                    axios.post(url, this.listaTareasIn).
                        then((resp) => {
                            let rm = resp.data;

                            if (rm.response) {
                                rm.result = 1;
                                indexODT.$emit('responseModel', rm);
                            } else {
                                this.showAlert(rm.title, rm.message, 'warning');
                            }
                        }).catch((error) => {

                        });
                } else {
                    this.showAlert('Validación', 'No se detectaron tareas para agregar a la orden de Trabajo!.', 'warning');
                }
            }
        }
    })
</script>