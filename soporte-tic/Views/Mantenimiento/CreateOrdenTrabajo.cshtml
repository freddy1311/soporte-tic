@model soporte_tic.Models.ViewModels.VMOrdenTrabajo

@{
    var modelOrdenTrabajo = Model;
}

<div class="modal-dialog modal-dialog-centered" role="document" id="frmCreateOrdenTrabajo">
    <div class="modal-content" id="frmContent">
        <div class="modal-header">
            <h5 class="modal-title" id="staticBackdropLabel">Crear Orden Trabajo</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">

        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            <button type="button" class="btn btn-primary" v-on:click="createOrdenTrabajo()">Crear</button>
        </div>
    </div>
</div>

<script>
    var frmCreateOrdenTrabajo = new Vue({
        el: '#frmCreateOrdenTrabajo',
        data: {
            vmOrdenTrabajo: {

            }
        },
        mounted: function () {

        },
        created: function () {
            this.vmOrdenTrabajo = @Html.Raw(Json.Serialize(Model));
            console.log('vmOrdenTrabajo: ', this.vmOrdenTrabajo);
        },
        methods: {
            blockUI: function (msg) {
                $(function () {
                    //#region block UI
                    $('#frmContent').block({
                        message: msg,
                        css: {
                            backgroundColor: '#36404a',
                            color: '#fff',
                            height: 40,
                            paddingTop: 10,
                            paddingLeft: 10,
                            paddingRight: 10,
                            borderRadius: 7,
                            border: '0',
                            opacity: 0.5,
                            zIndex: 9999999,
                            cursor: 'wait'
                        },
                    });
                    //#endregion
                });
            },
            unblockUI: function () {
                $(function () {
                    $('#frmContent').unblock();
                });
            },
            showAlert: function (title, msg, icon) {

                const typeIcon = icon;

                Swal.fire(
                    {
                        title: title,
                        text: msg,
                        icon: typeIcon,
                        confirmButtonColor: '#0576b9'
                    }
                );
            },
            validateFields: function () {

                let isValid = true;

                //#region nombre
                if (this.vmMaquinaria.maquNombre == '' ||
                    this.vmMaquinaria.maquNombre == null) {
                    $('#txtNombre').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#txtNombre').removeClass('is-invalid');
                }
                //#endregion

                //#region descripcion
                if (this.vmMaquinaria.maquDescripcion == '' ||
                    this.vmMaquinaria.maquDescripcion == null) {
                    $('#txtDescripcion').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#txtDescripcion').removeClass('is-invalid');
                }
                //#endregion

                return isValid;
            },
            createOrdenTrabajo: function () {
                let url = '/Mantenimiento/CreateOrdenTrabajo/';

                if (!this.validateFields()) {
                    return;
                }

                console.log('vmOrdenTrabajo: ' + JSON.stringify(this.vmOrdenTrabajo));
                //let tipo = this.vmOrdenTrabajo.maquTipo;

                this.blockUI('Creando orden de trabajo...');

                axios.post(url, this.vmOrdenTrabajo).then((resp) => {
                    let rm = resp.data;

                    if (rm.response) {
                        rm.result = null;
                        rm.result = tipo;
                        indexODT.$emit('responseModel', rm);
                        this.showAlert(rm.title, rm.message, 'success');
                    } else {
                        this.showAlert(rm.title, rm.message, 'warning');
                    }

                    this.unblockUI();
                }).catch((error) => {
                    this.unblockUI();
                    console.log('Ocurrió un error en createOrdenTrabajo: ' + error);
                });
            }
        }
    });
</script>