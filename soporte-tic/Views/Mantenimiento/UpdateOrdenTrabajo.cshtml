@model soporte_tic.Models.ViewModels.VMOrdenTrabajo

@{
    var modelOrdenTrabajo = Model;
    var fechaEstablecida = ViewData["CurrentDate"];
}

<div class="modal-dialog modal-dialog-centered" role="document" id="frmEditarOrdenTrabajo">
    <div class="modal-content" id="frmContent">
        <div class="modal-header">
            <h5 class="modal-title" id="staticBackdropLabel">Editar Orden Trabajo</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div class="row mb-1">
                <div class="col-lg-12">
                    <label for="cboSemana">Semana:</label>
                    <select id="cboSemana" class="form-select" v-on:change="selectWeek($event)" v-model="vmOrdenTrabajo.ortrSemana">
                        <option selected class="text-muted" value="-1">Seleccione un tipo...</option>
                        <option value="1">Semana 1</option>
                        <option value="2">Semana 2</option>
                        <option value="3">Semana 3</option>
                        <option value="4">Semana 4</option>
                        <option value="5">Semana 5</option>
                        <option value="6">Semana 6</option>
                        <option value="7">Semana 7</option>
                        <option value="8">Semana 8</option>
                        <option value="9">Semana 9</option>
                        <option value="10">Semana 10</option>
                        <option value="11">Semana 11</option>
                        <option value="12">Semana 12</option>
                        <option value="13">Semana 13</option>
                        <option value="14">Semana 14</option>
                        <option value="15">Semana 15</option>
                        <option value="16">Semana 16</option>
                        <option value="17">Semana 17</option>
                        <option value="18">Semana 18</option>
                        <option value="19">Semana 19</option>
                        <option value="20">Semana 20</option>
                        <option value="21">Semana 21</option>
                        <option value="22">Semana 22</option>
                        <option value="23">Semana 23</option>
                        <option value="24">Semana 24</option>
                        <option value="25">Semana 25</option>
                        <option value="26">Semana 26</option>
                        <option value="27">Semana 27</option>
                        <option value="28">Semana 28</option>
                        <option value="29">Semana 29</option>
                        <option value="30">Semana 30</option>
                        <option value="31">Semana 31</option>
                        <option value="32">Semana 32</option>
                        <option value="33">Semana 33</option>
                        <option value="34">Semana 34</option>
                        <option value="35">Semana 35</option>
                        <option value="36">Semana 36</option>
                        <option value="37">Semana 37</option>
                        <option value="38">Semana 38</option>
                        <option value="39">Semana 39</option>
                        <option value="40">Semana 40</option>
                        <option value="41">Semana 41</option>
                        <option value="42">Semana 42</option>
                        <option value="43">Semana 43</option>
                        <option value="44">Semana 44</option>
                        <option value="45">Semana 45</option>
                        <option value="46">Semana 46</option>
                        <option value="47">Semana 47</option>
                        <option value="48">Semana 48</option>
                        <option value="49">Semana 49</option>
                        <option value="50">Semana 50</option>
                        <option value="51">Semana 51</option>
                        <option value="52">Semana 52</option>
                    </select>
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-6">
                    <label for="fechaPrevistaInicio" class="form-label">Fecha prevista desde:</label>
                    <input class="form-control" type="date" v-model="fechaInicio" value="fechaInicio"
                           id="fechaPrevistaInicio">
                </div>
                <div class="col-lg-6">
                    <label for="fechaPrevistaFin" class="form-label">Fecha prevista hasta:</label>
                    <input class="form-control" type="date" v-model="fechaFin" value="fechaFin"
                           id="fechaPrevistaFin">
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-12">
                    <label for="cboTipo">Tipo:</label>
                    <select id="cboTipo" class="form-select" v-model="vmOrdenTrabajo.ortrTipo">
                        <option selected class="text-muted" value="-1">Seleccione un tipo...</option>
                        <option value="1">MECÁNICO</option>
                        <option value="2">ELÉCTRICO</option>
                    </select>
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-12">
                    <label for="cboMaquinariaPadre">Línea:</label>
                    <input class="form-control" type="text" disabled readonly v-model="vmOrdenTrabajo.maquNombreF" />
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-12">
                    <label for="cboMaquinaria">Maquinaria:</label>
                    <input class="form-control" type="text" disabled readonly v-model="vmOrdenTrabajo.maquNombre" />
                </div>
            </div>
            <div class="row mb-1">
                <div class="col-lg-12">
                    <label for="cboResponsable">Responsable:</label>
                    <select id="cboResponsable" class="form-select" v-on:change="selectResponsable()" v-model="vmOrdenTrabajo.usuaResponsable">
                        <option selected class="text-muted" value="-1">Seleccione un responsable...</option>
                        <option v-for="resp of responsables" :value="resp.usuaCodigo">{{resp.usuaNombre}}</option>
                    </select>
                </div>
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
            <button type="button" class="btn btn-primary" v-on:click="updateOrdenTrabajo()">Actualizar</button>
        </div>
    </div>
</div>

<script>
    var frmEditarOrdenTrabajo = new Vue({
        el: '#frmEditarOrdenTrabajo',
        data: {
            lineas: [],
            maquinarias: [],
            responsables: [],
            vmOrdenTrabajo: {

            },
            fechaInicio: '',
            fechaFin: ''
        },
        mounted: function () {

        },
        created: function () {
            this.vmOrdenTrabajo = @Html.Raw(Json.Serialize(Model));
            //console.log('vmOrdenTrabajo: ', this.vmOrdenTrabajo);
            
            if (this.vmOrdenTrabajo.ortrSemana > 1) {
                this.selectWeek2(this.vmOrdenTrabajo.ortrSemana);
            }
            this.getLineas();
            this.getUsuarios();
        },
        methods: {
            blockUI: function (msg) {
                $(function () {
                    //#region block UI
                    $('#frmContent').block({
                        message: msg,
                        css: {
                            backgroundColor: '#36404a',
                            color: '#fff',
                            height: 40,
                            paddingTop: 10,
                            paddingLeft: 10,
                            paddingRight: 10,
                            borderRadius: 7,
                            border: '0',
                            opacity: 0.5,
                            zIndex: 9999999,
                            cursor: 'wait'
                        },
                    });
                    //#endregion
                });
            },
            unblockUI: function () {
                $(function () {
                    $('#frmContent').unblock();
                });
            },
            showAlert: function (title, msg, icon) {

                const typeIcon = icon;

                Swal.fire(
                    {
                        title: title,
                        text: msg,
                        icon: typeIcon,
                        confirmButtonColor: '#0576b9'
                    }
                );
            },
            validateFields: function () {

                let isValid = true;

                //#region semana
                if (this.vmOrdenTrabajo.ortrSemana == 0 ||
                    this.vmOrdenTrabajo.ortrSemana == null) {
                    $('#cboSemana').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#cboSemana').removeClass('is-invalid');
                }
                //#endregion

                //#region fechas previstas
                if (this.vmOrdenTrabajo.ortrFechaPrevistaInicio == '' ||
                    this.vmOrdenTrabajo.ortrFechaPrevistaInicio == null) {
                    $('#fechaPrevistaInicio').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#fechaPrevistaInicio').removeClass('is-invalid');
                }

                if (this.vmOrdenTrabajo.ortrFechaPrevistaFin == '' ||
                    this.vmOrdenTrabajo.ortrFechaPrevistaFin == null) {
                    $('#fechaPrevistaFin').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#fechaPrevistaFin').removeClass('is-invalid');
                }
                //#endregion

                //#region tipo
                if (this.vmOrdenTrabajo.ortrTipo == 0 ||
                    this.vmOrdenTrabajo.ortrTipo == null) {
                    $('#cboTipo').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#cboTipo').removeClass('is-invalid');
                }
                //#endregion

                //#region maquinaria
                if (this.vmOrdenTrabajo.maquCodigo == 0 ||
                    this.vmOrdenTrabajo.maquCodigo == null) {
                    $('#cboMaquinaria').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#cboMaquinaria').removeClass('is-invalid');
                }
                //#endregion

                //#region responsable
                if (this.vmOrdenTrabajo.usuaResponsable == 0 ||
                    this.vmOrdenTrabajo.usuaResponsable == null) {
                    $('#cboResponsable').addClass('is-invalid');
                    isValid = false;
                } else {
                    $('#cboResponsable').removeClass('is-invalid');
                }
                //#endregion

                return isValid;
            },
            getLineas: function () {
                const url = '/Maquinaria/GetListMaquinarias/';
                this.lineas = [];

                axios.get(url).then(response => {
                    let rm = response.data;

                    if (rm.response) {
                        this.lineas = rm.result;
                    } else {
                        this.lineas = [];
                    }

                }).catch(error => {
                    console.error('Error getLineas => ' + error);
                });
            },
            selectLinea: function () {
                let lineaSelected = $('#cboMaquinariaPadre').val();
                this.maquinarias = [];
                this.getMaquinarias(lineaSelected);
            },
            getMaquinarias: function (codLinea) {
                if (codLinea) {
                    const url = '/Maquinaria/GetListMaquinariasComponente/';
                    this.maquinarias = [];

                    axios.get(url, {params: { codMaquinaria: codLinea }}).then(response => {
                        let rm = response.data;

                        if (rm.response) {
                            this.maquinarias = rm.result;
                        } else {
                            this.maquinarias = [];
                        }

                    }).catch(error => {
                        console.error('Error getMaquinarias => ' + error);
                    });
                } else {
                    this.showAlert('Validación', 'No se detectó código de Línea!.', 'warning');
                }
            },
            selectMaquinaria: function () {
                let maquinariaSelected = $('#cboMaquinaria').val();
                this.vmOrdenTrabajo.maquCodigo = maquinariaSelected;
            },
            getUsuarios: function () {
                const url = '/Usuario/GetListTecnicos/';
                this.responsables = [];

                axios.get(url).then(response => {
                    let rm = response.data;
                    //console.log(`getUsuarios() ${rm.response}`);

                    if (rm.response) {
                        this.responsables = rm.result;
                    } else {
                        this.responsables = [];
                    }

                }).catch(error => {
                    console.error('Error getUsuarios => ' + error);
                });
            },
            selectResponsable: function () {
                let responsableSelected = $('#cboResponsable').val();
                this.vmOrdenTrabajo.usuaResponsable = responsableSelected;
            },
            selectWeek: function (event) {
                //console.log(`Semana seleccionada: ${JSON.stringify(event.target.value)}`);
                let numSemana = parseInt(event.target.value);

                const anio = new Date().getFullYear();
                const primerJueves = new Date(anio, 0, 4);
                const diaSemana = primerJueves.getDay();
                const diferenciaAlLunes = ((diaSemana + 6) % 7);

                const primerLunes = new Date(primerJueves);
                primerLunes.setDate(primerJueves.getDate() - diferenciaAlLunes);

                const inicio = new Date(primerLunes);
                inicio.setDate(primerLunes.getDate() + (numSemana - 1) * 7);

                const fin = new Date(inicio);
                fin.setDate(inicio.getDate() + 6);

                const formatear = (fecha) => {
                    const yyyy = fecha.getFullYear();
                    const MM = String(fecha.getMonth() + 1).padStart(2, '0');
                    const dd = String(fecha.getDate()).padStart(2, '0');
                    const HH = String(fecha.getHours()).padStart(2, '0');
                    const mm = String(fecha.getMinutes()).padStart(2, '0');
                    return `${yyyy}-${MM}-${dd}`;
                };

                this.fechaInicio = formatear(inicio);
                this.fechaFin = formatear(fin);
                //console.log(`Fechas de Semana seleccionada: ${this.fechaInicio} - ${this.fechaFin}`);
            },
            selectWeek2: function (num) {
                let numSemana = parseInt(num);

                const anio = new Date().getFullYear();
                const primerJueves = new Date(anio, 0, 4);
                const diaSemana = primerJueves.getDay();
                const diferenciaAlLunes = ((diaSemana + 6) % 7);

                const primerLunes = new Date(primerJueves);
                primerLunes.setDate(primerJueves.getDate() - diferenciaAlLunes);

                const inicio = new Date(primerLunes);
                inicio.setDate(primerLunes.getDate() + (numSemana - 1) * 7);

                const fin = new Date(inicio);
                fin.setDate(inicio.getDate() + 6);

                const formatear = (fecha) => {
                    const yyyy = fecha.getFullYear();
                    const MM = String(fecha.getMonth() + 1).padStart(2, '0');
                    const dd = String(fecha.getDate()).padStart(2, '0');
                    const HH = String(fecha.getHours()).padStart(2, '0');
                    const mm = String(fecha.getMinutes()).padStart(2, '0');
                    return `${yyyy}-${MM}-${dd}`;
                };

                this.fechaInicio = formatear(inicio);
                this.fechaFin = formatear(fin);
                //console.log(`Fechas de Semana seleccionada: ${this.fechaInicio} - ${this.fechaFin}`);
            },
            updateOrdenTrabajo: function () {
                let url = '/Mantenimiento/UpdateOrdenTrabajo/';

                this.vmOrdenTrabajo.ortrFechaPrevistaInicio = this.fechaInicio;
                this.vmOrdenTrabajo.ortrFechaPrevistaFin = this.fechaFin;

                //console.log('vmOrdenTrabajo: ' + JSON.stringify(this.vmOrdenTrabajo));

                if (!this.validateFields()) {
                    return;
                }


                //let tipo = this.vmOrdenTrabajo.maquTipo;

                this.blockUI('Creando orden de trabajo...');

                axios.put(url, this.vmOrdenTrabajo).then((resp) => {
                    let rm = resp.data;

                    if (rm.response) {
                        rm.result = null;
                        rm.result = 1;
                        indexODT.$emit('responseModel', rm);
                        this.showAlert(rm.title, rm.message, 'success');
                    } else {
                        this.showAlert(rm.title, rm.message, 'warning');
                    }

                    this.unblockUI();
                }).catch((error) => {
                    this.unblockUI();
                    console.log('Ocurrió un error en updateOrdenTrabajo: ' + error);
                });
            }
        }
    });
</script>